apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo  # The name of the StatefulSet
  labels:
    app: mongo  # Labels used to identify this StatefulSet
spec:
  selector:
    matchLabels:
      app: mongo  # The selector used to identify the pods managed by this StatefulSet
  serviceName: "mongo"  # The name of the headless service used for the StatefulSet
  replicas: 3  # The number of pod replicas to create
  template:
    metadata:
      labels:
        app: mongo  # Labels for the pod template
    spec:
      containers:
        - name: mongo  # The name of the container
          image: mongo:4.0.8  # The image of the MongoDB container
          startupProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"  # Command to check if the MongoDB service has started
            initialDelaySeconds: 1  # Initial delay before the first probe
            periodSeconds: 10  # Period between probes
            timeoutSeconds: 5  # Timeout for each probe
            successThreshold: 1  # Number of successful probes before the container is considered started
            failureThreshold: 2  # Number of failed probes before the container is considered failed
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"  # Command to check if the MongoDB service is alive
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"  # Command to check if the MongoDB service is ready to accept traffic
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          env:
            - name: MONGO_INITDB_ROOT_USERNAME  # Environment variable for MongoDB root username
              valueFrom:
                configMapKeyRef:
                  key: username  # Key in the ConfigMap
                  name: mongodb-config  # Name of the ConfigMap
            - name: MONGO_INITDB_ROOT_PASSWORD  # Environment variable for MongoDB root password
              valueFrom:
                secretKeyRef:
                  key: password  # Key in the Secret
                  name: mongodb-secret  # Name of the Secret
          command:
            - mongod
            - "--bind_ip_all"  # Bind MongoDB to all IP addresses
            - "--replSet"
            - rs0  # Name of the replica set
          volumeMounts:
            - name: mongo-volume  # Name of the volume mount
              mountPath: /data/db  # Path where the volume will be mounted
            - name: mongodb-config  # Mount the configuration volume
              mountPath: /etc/mongo  # Path for the configuration
      volumes:
        - name: mongodb-config  # Define a volume from ConfigMap
          configMap:
            name: mongodb-config  # Name of the ConfigMap
            items:
              - key: mongodb.conf  # Key in the ConfigMap
                path: mongodb.conf  # Path to place the file in the container
  volumeClaimTemplates:
    - metadata:
        name: mongo-volume  # Name of the PersistentVolumeClaim template
      spec:
        accessModes: ["ReadWriteOnce"]  # Access mode for the PVC
        storageClassName: demo-storage  # Storage class for the PVC
        resources:
          requests:
            storage: 1Gi  # Requested storage size
